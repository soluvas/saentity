/*
* generated by Xtext
*/
package com.soluvas.saentity.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.soluvas.saentity.services.SaentityGrammarAccess;

public class SaentityParser extends AbstractContentAssistParser {
	
	@Inject
	private SaentityGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.soluvas.saentity.ui.contentassist.antlr.internal.InternalSaentityParser createParser() {
		com.soluvas.saentity.ui.contentassist.antlr.internal.InternalSaentityParser result = new com.soluvas.saentity.ui.contentassist.antlr.internal.InternalSaentityParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAttributeAccess().getAlternatives(), "rule__Attribute__Alternatives");
					put(grammarAccess.getAttributeAccess().getAlternatives_1_3(), "rule__Attribute__Alternatives_1_3");
					put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
					put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup_1(), "rule__Attribute__Group_1__0");
					put(grammarAccess.getAttributeAccess().getGroup_1_3_1(), "rule__Attribute__Group_1_3_1__0");
					put(grammarAccess.getModelAccess().getPackageNameAssignment_2(), "rule__Model__PackageNameAssignment_2");
					put(grammarAccess.getModelAccess().getEntitiesAssignment_3(), "rule__Model__EntitiesAssignment_3");
					put(grammarAccess.getEntityAccess().getNameAssignment_2(), "rule__Entity__NameAssignment_2");
					put(grammarAccess.getEntityAccess().getLabelsAssignment_4(), "rule__Entity__LabelsAssignment_4");
					put(grammarAccess.getEntityAccess().getAttributesAssignment_7(), "rule__Entity__AttributesAssignment_7");
					put(grammarAccess.getLabelAccess().getNameAssignment(), "rule__Label__NameAssignment");
					put(grammarAccess.getAttributeAccess().getNameAssignment_0(), "rule__Attribute__NameAssignment_0");
					put(grammarAccess.getAttributeAccess().getNameAssignment_1_2(), "rule__Attribute__NameAssignment_1_2");
					put(grammarAccess.getAttributeAccess().getDataTypeAssignment_1_3_0(), "rule__Attribute__DataTypeAssignment_1_3_0");
					put(grammarAccess.getAttributeAccess().getDataTypeAssignment_1_3_1_1(), "rule__Attribute__DataTypeAssignment_1_3_1_1");
					put(grammarAccess.getAttributeAccess().getDataClassAssignment_1_3_1_2(), "rule__Attribute__DataClassAssignment_1_3_1_2");
					put(grammarAccess.getAttributeAccess().getDescriptionAssignment_1_4(), "rule__Attribute__DescriptionAssignment_1_4");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.soluvas.saentity.ui.contentassist.antlr.internal.InternalSaentityParser typedParser = (com.soluvas.saentity.ui.contentassist.antlr.internal.InternalSaentityParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SaentityGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SaentityGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
