/*
* generated by Xtext
*/

package com.soluvas.saentity.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SaentityGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPackageNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPackageNameFQNParserRuleCall_2_0 = (RuleCall)cPackageNameAssignment_2.eContents().get(0);
		private final Assignment cEntitiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEntitiesEntityParserRuleCall_3_0 = (RuleCall)cEntitiesAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Model:
		//	"(" "package" packageName=FQN entities+=Entity* ")";
		public ParserRule getRule() { return rule; }

		//"(" "package" packageName=FQN entities+=Entity* ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//"package"
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }

		//packageName=FQN
		public Assignment getPackageNameAssignment_2() { return cPackageNameAssignment_2; }

		//FQN
		public RuleCall getPackageNameFQNParserRuleCall_2_0() { return cPackageNameFQNParserRuleCall_2_0; }

		//entities+=Entity*
		public Assignment getEntitiesAssignment_3() { return cEntitiesAssignment_3; }

		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_3_0() { return cEntitiesEntityParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLabelsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLabelsLabelParserRuleCall_4_0 = (RuleCall)cLabelsAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cAttributesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAttributesAttributeParserRuleCall_7_0 = (RuleCall)cAttributesAssignment_7.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Entity:
		//	"(" "entity" name=ID "[" labels+=Label+ "]" "[" attributes+=Attribute* "]" ")";
		public ParserRule getRule() { return rule; }

		//"(" "entity" name=ID "[" labels+=Label+ "]" "[" attributes+=Attribute* "]" ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//"entity"
		public Keyword getEntityKeyword_1() { return cEntityKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }

		//labels+=Label+
		public Assignment getLabelsAssignment_4() { return cLabelsAssignment_4; }

		//Label
		public RuleCall getLabelsLabelParserRuleCall_4_0() { return cLabelsLabelParserRuleCall_4_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }

		//"["
		public Keyword getLeftSquareBracketKeyword_6() { return cLeftSquareBracketKeyword_6; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_7() { return cAttributesAssignment_7; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_7_0() { return cAttributesAttributeParserRuleCall_7_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }

		//")"
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Label:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAttrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Alternatives cAlternatives_1_3 = (Alternatives)cGroup_1.eContents().get(3);
		private final Assignment cDataTypeAssignment_1_3_0 = (Assignment)cAlternatives_1_3.eContents().get(0);
		private final RuleCall cDataTypeDataTypeParserRuleCall_1_3_0_0 = (RuleCall)cDataTypeAssignment_1_3_0.eContents().get(0);
		private final Group cGroup_1_3_1 = (Group)cAlternatives_1_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_3_1_0 = (Keyword)cGroup_1_3_1.eContents().get(0);
		private final Assignment cDataTypeAssignment_1_3_1_1 = (Assignment)cGroup_1_3_1.eContents().get(1);
		private final Keyword cDataTypeObjectKeyword_1_3_1_1_0 = (Keyword)cDataTypeAssignment_1_3_1_1.eContents().get(0);
		private final Assignment cDataClassAssignment_1_3_1_2 = (Assignment)cGroup_1_3_1.eContents().get(2);
		private final RuleCall cDataClassFQNParserRuleCall_1_3_1_2_0 = (RuleCall)cDataClassAssignment_1_3_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3_1_3 = (Keyword)cGroup_1_3_1.eContents().get(3);
		private final Assignment cDescriptionAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_1_4_0 = (RuleCall)cDescriptionAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//Attribute:
		//	name=ID | "(" "attr" name=ID (dataType=DataType | "(" dataType="object" dataClass=FQN ")") description=STRING? ")";
		public ParserRule getRule() { return rule; }

		//name=ID | "(" "attr" name=ID (dataType=DataType | "(" dataType="object" dataClass=FQN ")") description=STRING? ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"(" "attr" name=ID (dataType=DataType | "(" dataType="object" dataClass=FQN ")") description=STRING? ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//"attr"
		public Keyword getAttrKeyword_1_1() { return cAttrKeyword_1_1; }

		//name=ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }

		//dataType=DataType | "(" dataType="object" dataClass=FQN ")"
		public Alternatives getAlternatives_1_3() { return cAlternatives_1_3; }

		//dataType=DataType
		public Assignment getDataTypeAssignment_1_3_0() { return cDataTypeAssignment_1_3_0; }

		//DataType
		public RuleCall getDataTypeDataTypeParserRuleCall_1_3_0_0() { return cDataTypeDataTypeParserRuleCall_1_3_0_0; }

		//"(" dataType="object" dataClass=FQN ")"
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_3_1_0() { return cLeftParenthesisKeyword_1_3_1_0; }

		//dataType="object"
		public Assignment getDataTypeAssignment_1_3_1_1() { return cDataTypeAssignment_1_3_1_1; }

		//"object"
		public Keyword getDataTypeObjectKeyword_1_3_1_1_0() { return cDataTypeObjectKeyword_1_3_1_1_0; }

		//dataClass=FQN
		public Assignment getDataClassAssignment_1_3_1_2() { return cDataClassAssignment_1_3_1_2; }

		//FQN
		public RuleCall getDataClassFQNParserRuleCall_1_3_1_2_0() { return cDataClassFQNParserRuleCall_1_3_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3_1_3() { return cRightParenthesisKeyword_1_3_1_3; }

		//description=STRING?
		public Assignment getDescriptionAssignment_1_4() { return cDescriptionAssignment_1_4; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_1_4_0() { return cDescriptionSTRINGTerminalRuleCall_1_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDecimalKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBooleanKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDateKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cIntArrayKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cMapKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cMapArrayKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//// TODO: should be separated into Sarepo DSL, as a set of entity can use multiple repos
		//DataType:
		//	"string" | "int" | "decimal" | "boolean" | "date" | "int-array" | "map" | "map-array";
		public ParserRule getRule() { return rule; }

		//"string" // TODO: should be separated into Sarepo DSL, as a set of entity can use multiple repos
		//| "int" | "decimal" | "boolean" | "date" | "int-array" | "map" | "map-array"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"string"
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }

		//"int"
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }

		//"decimal"
		public Keyword getDecimalKeyword_2() { return cDecimalKeyword_2; }

		//"boolean"
		public Keyword getBooleanKeyword_3() { return cBooleanKeyword_3; }

		//"date"
		public Keyword getDateKeyword_4() { return cDateKeyword_4; }

		//"int-array"
		public Keyword getIntArrayKeyword_5() { return cIntArrayKeyword_5; }

		//"map"
		public Keyword getMapKeyword_6() { return cMapKeyword_6; }

		//// TODO: should be separated into Sarepo DSL, as a set of entity can use multiple repos
		//"map-array"
		public Keyword getMapArrayKeyword_7() { return cMapArrayKeyword_7; }
	}
	
	
	private ModelElements pModel;
	private FQNElements pFQN;
	private EntityElements pEntity;
	private LabelElements pLabel;
	private AttributeElements pAttribute;
	private DataTypeElements pDataType;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SaentityGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"(" "package" packageName=FQN entities+=Entity* ")";
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//FQN:
	//	ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return (pFQN != null) ? pFQN : (pFQN = new FQNElements());
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//Entity:
	//	"(" "entity" name=ID "[" labels+=Label+ "]" "[" attributes+=Attribute* "]" ")";
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Label:
	//	name=ID;
	public LabelElements getLabelAccess() {
		return (pLabel != null) ? pLabel : (pLabel = new LabelElements());
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//Attribute:
	//	name=ID | "(" "attr" name=ID (dataType=DataType | "(" dataType="object" dataClass=FQN ")") description=STRING? ")";
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//// TODO: should be separated into Sarepo DSL, as a set of entity can use multiple repos
	//DataType:
	//	"string" | "int" | "decimal" | "boolean" | "date" | "int-array" | "map" | "map-array";
	public DataTypeElements getDataTypeAccess() {
		return (pDataType != null) ? pDataType : (pDataType = new DataTypeElements());
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
