/*
 * generated by Xtext
 */
package com.soluvas.saentity.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import net.danieldietrich.xtext.bifsa.IBiFileSystemAccess
import com.soluvas.saentity.saentity.Model
import com.soluvas.saentity.saentity.Entity
import org.eclipse.xtext.util.StringInputStream
import java.io.IOException
import net.danieldietrich.xtext.generator.protectedregions.RegionParserFactory
import net.danieldietrich.protectedregions.xtext.IBidiFileSystemAccess
import net.danieldietrich.protectedregions.core.RegionParserFactory
import net.danieldietrich.protectedregions.xtext.ProtectedRegionSupport

class SaentityDozerGenerator implements IGenerator {
	
	IFileSystemAccess regionFsa
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val bfsa = fsa as IBidiFileSystemAccess

	    regionFsa = new ProtectedRegionSupport$Builder(bfsa)
	    	.addParser(RegionParserFactory::createJavaParser, ".java")
	    	.addParser(RegionParserFactory::createXmlParser, ".xml")
	    	.read("", IFileSystemAccess::DEFAULT_OUTPUT)
	    	.build

		var model = resource.contents.get(0) as Model
		var generated = renderDozerMapping(model.packageName, model.entities).toString
		var fileName = model.packageName.toPath + "/" + "mapping.dozer.xml"
//		var parser = RegionParserFactory::createXmlParser
//		RegionUtils::generateProtectableFile(fileName, bfsa, parser, generated)
		regionFsa.generateFile(fileName, generated)
	}
	
	def renderDozerMapping(String packageName, Iterable<Entity> entities) {
		'''
		<?xml version="1.0" encoding="UTF-8"?>
		<!-- Generated by Soluvas Saentity Dozer Mapping Generator (http://www.soluvas.com) -->
		<mappings xmlns="http://dozer.sourceforge.net" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			xsi:schemaLocation="http://dozer.sourceforge.net http://dozer.sourceforge.net/schema/beanmapping.xsd">
			«FOR entity : entities»
			
			<mapping map-id="«entity.name»">
				<class-a>java.util.Map</class-a>
				<class-b>«packageName».«entity.name»</class-b>
				«FOR attribute : entity.attributes»
				<field><a>«attribute.name»</a><b>«attribute.name.toCamelCaseLower»</b></field>
				«ENDFOR»
				<!--PROTECTED REGION ID («entity.name»_entity) START-->
				<!--PROTECTED REGION END-->
			</mapping>
			«ENDFOR»
			
			<!--PROTECTED REGION ID (package) START-->
			<!--put additional mappings here-->
			<!--PROTECTED REGION END-->
			
		</mappings>
		'''
	}
	
	def String toCamelCase(String underscored) {
		StringUtils::camelCase(underscored)
	}

	def String toCamelCaseLower(String underscored) {
		StringUtils::camelCase(underscored).toFirstLower
	}
	
	def String toPath(String packageName) {
		packageName.replace('.', '/')
	}

}
